AWSTemplateFormatVersion: '2010-09-09'
Description: Template used to create an ECS Service

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC that the service is running inside of

  SubnetIDs:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Optional - Specifies the Comma separated list of existing VPC Subnet Ids where ECS instances will run

  ServiceName:
    Type: String
    Description: A name for the service

  ImageUrl:
    Type: String
    Description: The url of a docker image that contains the application process that will handle the traffic for this service

  PostgreUser:
    Default: startupadmin
    Type: String
    Description: Database admin account name
    MinLength: 5
    MaxLength: 16
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: Name must begin with a letter and contain only alphanumeric characters

  PostgrePassword:
    NoEcho: true
    Type: String
    Description: Database admin account password
    MinLength: 8
    MaxLength: 41
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: Password must contain only alphanumeric characters

  NodeAuthJwtSecret:
    Type: String
    Description: Jwt Secret for auth

  FrontendUrl:
    Type: String
    Description: Frontend Url

  ClusterName:
    Type: String
    Description: The name of the ECS cluster into which to launch capacity.

Resources:
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
            Condition:
              ArnLike:
                aws:SourceArn: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:*
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
      Path: /

      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ServiceName
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Cpu: 0
          Image: !Ref ImageUrl
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Name: movies-ecs-demo-80-tcp
              AppProtocol: http
          Environment:
            - Name: POSTGRES_USER
              Value: !Ref PostgreUser
            - Name: POSTGRES_PASSWORD
              Value: !Ref PostgrePassword
            - Name: POSTGRES_PORT
              Value: 5432
            - Name: POSTGRES_DB
              Value: moviesdb  
            - Name: PORT
              Value: 80  
            - Name: NODE_AUTH_JWT_EXPIRATION
              Value: 99years  
            - Name: DATABASE_URL
              Value: postgres://postgres:20173249862Loren@movies-db.cz3km6sefsom.us-east-1.rds.amazonaws.com:5432/moviesdb?connect_timeout=300  
            - Name: TMDB_DATA_TOKEN
              Value: eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJlNTYzNTJlOTNiYjYxMDAzOTlmYWRlOTEwOWJmZDZlZiIsInN1YiI6IjY1MTA2ZjhkM2E0YTEyMDExY2YzODU3OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.1cFyR5ufMzrk0Yrt_weuo0bOihBRH-xo-rgjdsQVXSQ  
            - Name: TMDB_API_BASE_URL
              Value: https://api.themoviedb.org/3/
            - Name: NODE_AUTH_JWT_SECRET
              Value: !Ref NodeAuthJwtSecret
            - Name: FRONTEND_URL
              Value: https://master.d757vndz252cy.amplifyapp.com/
            - Name: NODE_ENV
              Value: development
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ServiceName
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX


  LogGroup:
    Type: AWS::Logs::LogGroup

  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - PublicHttpLoadBalancerListener
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref ClusterName
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Base: 0
          Weight: 1
      TaskDefinition: !Ref TaskDefinition
      SchedulingStrategy: REPLICA
      DesiredCount: 0
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: 80
          LoadBalancerName:
            Ref: AWS::NoValue
          TargetGroupArn: !Ref ServiceTargetGroup
      HealthCheckGracePeriodSeconds: 20
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          Subnets: !Ref SubnetIDs
      PlatformVersion: LATEST
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      ServiceConnectConfiguration:
        Enabled: false
      EnableECSManagedTags: true
      
  ServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /
      Name: !Ref ServiceName
      Port: 80
      Protocol: HTTP
      TargetType: ip
      HealthCheckProtocol: HTTP
      VpcId: !Ref VpcId
      
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: movies-ecs-service-sg
      GroupDescription: Security group for service
      VpcId: !Ref VpcId

  ServiceIngressfromLoadBalancer:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref ServiceSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'PublicLoadBalancerSG'

  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      GroupName: alb-sg
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIpv6: ::/0

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Name: BackendMoviesALB
      SecurityGroups:
        - !Ref PublicLoadBalancerSG
      Subnets: !Ref SubnetIDs

  PublicHttpLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: 'forward'
          TargetGroupArn: !Ref ServiceTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  PublicHttpsLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: 'forward'
          TargetGroupArn: !Ref ServiceTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: arn:aws:acm:us-east-1:755956360913:certificate/df2f3e58-ed73-44c3-bea7-041dd5adac18